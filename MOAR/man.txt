
socat(1)                                                              socat(1)

NAME
       socat - Multipurpose relay (SOcket CAT)

SYNOPSIS
       socat [options] <address> <address>
       socat -V
       socat -h[h[h]] | -?[?[?]]
       filan
       procan

DESCRIPTION
       Socat  is  a  command  line based utility that establishes two bidirec-
       tional byte streams  and  transfers  data  between  them.  Because  the
       streams  can be constructed from a large set of different types of data
       sinks and sources (see address types),  and  because  lots  of  address
       options  may be applied to the streams, socat can be used for many dif-
       ferent purposes.

       Filan is a utility  that  prints  information  about  its  active  file
       descriptors  to  stdout.  It  has been written for debugging socat, but
       might be useful for other purposes too. Use the -h option to find  more
      infos.

      Procan is a utility that prints information about process parameters to
      stdout. It has been written to  better  understand  some  UNIX  process
      properties  and for debugging socat, but might be useful for other pur-
      poses too.

      The life cycle of a socat instance typically consists of four phases.

      In the init phase, the command line options are parsed and  logging  is
      initialized.

      During the open phase, socat opens the first address and afterwards the
      second address. These steps are usually blocking; thus, especially  for
      complex address types like socks, connection requests or authentication
      dialogs must be completed before the next step is started.

      In the transfer phase, socat watches both streams' read and write  file
      descriptors  via select() , and, when data is available on one side and
      can be written to the other side,  socat  reads  it,  performs  newline
      character  conversions  if  required,  and writes the data to the write
      file descriptor of the other stream, then continues  waiting  for  more
      data in both directions.

      When  one  of  the  streams  effectively reaches EOF, the closing phase
      begins. Socat transfers the EOF condition to  the  other  stream,  i.e.
      tries  to  shutdown only its write stream, giving it a chance to termi-
      nate gracefully. For a defined time socat continues to transfer data in
      the  other direction, but then closes all remaining channels and termi-
      nates.

OPTIONS
      Socat provides some command line options that modify the  behaviour  of
      the  program.  They  have  nothing to do with so called address options
      that are used as parts of address specifications.

      -V     Print version and available feature information to  stdout,  and
             exit.

      -h | -?
             Print  a help text to stdout describing command line options and
             available address types, and exit.

      -hh | -??
             Like -h, plus a list of the short names of all available address
             options.  Some options are platform dependend, so this output is
             helpful for checking the particular implementation.

      -hhh | -???
             Like -hh, plus a list of all available address option names.

      -d     Without this option, only fatal and error  messages  are  gener-
             ated;  applying  this  option  also prints warning messages. See
             DIAGNOSTICS for more information.

      -d -d  Prints fatal, error, warning, and notice messages.

      -d -d -d
             Prints fatal, error, warning, notice, and info messages.

      -d -d -d -d
             Prints fatal, error, warning, notice, info, and debug messages.

      -D     Logs information about  file  descriptors  before  starting  the
             transfer phase.

      -ly[<facility>]
             Writes messages to syslog instead of stderr; severity as defined
             with -d option. With optional <facility>, the syslog type can be
             selected,  default  is "daemon". Third party libraries might not
             obey this option.

      -lf<logfile>
             Writes messages to <logfile> [filename] instead of stderr.  Some
             third  party  libraries,  in  particular libwrap, might not obey
             this option.

      -ls    Writes messages to stderr (this  is  the  default).  Some  third
             party  libraries  might not obey this option, in particular lib-
             wrap appears to only log to syslog.

      -lp<progname>
             Overrides the program name printed in error  messages  and  used
             for constructing environment variable names.

      -lu    Extends  the  timestamp of error messages to microsecond resolu-
             tion. Does not work when logging to syslog.

      -lm[<facility>]
             Mixed log mode. During startup messages are printed  to  stderr;
             when  socat  starts the transfer phase loop or daemon mode (i.e.
             after opening all streams and before starting data transfer, or,
             with listening sockets with fork option, before the first accept
             call), it switches logging to syslog.  With optional <facility>,
             the syslog type can be selected, default is "daemon".

      -lh    Adds  hostname  to log messages. Uses the value from environment
             variable HOSTNAME or the value retrieved with uname()  if  HOST-
             NAME is not set.

      -v     Writes  the  transferred  data not only to their target streams,
             but also to stderr. The output format is text with some  conver-
             sions for readability, and prefixed with "> " or "< " indicating
             flow directions.

      -x     Writes the transferred data not only to  their  target  streams,
             but  also  to stderr. The output format is hexadecimal, prefixed
             with "> " or "< " indicating flow directions.  Can  be  combined
             with -v .

      -b<size>
             Sets  the  data  transfer block <size> [size_t].  At most <size>
             bytes are transferred per step. Default is 8192 bytes.

      -s     By default, socat terminates when an error occurred  to  prevent
             the  process from running when some option could not be applied.
             With this option, socat is sloppy with errors and tries to  con-
             tinue.  Even  with  this  option, socat will exit on fatals, and
             will abort connection attempts when security checks failed.

      -t<timeout>
             When one channel has reached EOF, the write part  of  the  other
             channel is shut down. Then, socat waits <timeout> [timeval] sec-
             onds before terminating. Default is 0.5  seconds.  This  timeout
             only  applies  to  addresses  where  write  and read part can be
             closed independently. When during the timeout interval the  read
             part gives EOF, socat terminates without awaiting the timeout.

      -T<timeout>
             Total  inactivity timeout: when socat is already in the transfer
             loop and nothing has happened for  <timeout>  [timeval]  seconds
             (no  data arrived, no interrupt occurred...) then it terminates.
             Useful with protocols like UDP that cannot transfer EOF.

      -u     Uses unidirectional mode. The first address  is  only  used  for
             reading,  and the second address is only used for writing (exam-
             ple).

      -U     Uses unidirectional mode in reverse direction. The first address
             is  only  used  for writing, and the second address is only used
             for reading.

      -g     During address option parsing, don't check if the option is con-
             sidered  useful  in the given address environment. Use it if you
             want to force, e.g., appliance of a socket option  to  a  serial
             device.

      -L<lockfile>
             If  lockfile  exists,  exits  with  error.  If lockfile does not
             exist, creates it and continues, unlinks lockfile on exit.

      -W<lockfile>
             If lockfile exists, waits until  it  disappears.  When  lockfile
             does  not  exist,  creates it and continues, unlinks lockfile on
             exit.

      -4     Use IP version 4 in case that the addresses do not implicitly or
             explicitly specify a version; this is the default.

      -6     Use IP version 6 in case that the addresses do not implicitly or
             explicitly specify a version.

ADDRESS SPECIFICATIONS
      With the address command line arguments, the user gives socat  instruc-
      tions and the necessary information for establishing the byte streams.

      An  address  specification usually consists of an address type keyword,
      zero or more required address parameters separated by ':' from the key-
      word and from each other, and zero or more address options separated by
      ','.

      The keyword specifies the address type (e.g., TCP4,  OPEN,  EXEC).  For
      some  keywords there exist synonyms ('-' for STDIO, TCP for TCP4). Key-
      words are case insensitive.  For a few special address types, the  key-
      word  may be omitted: Address specifications starting with a number are
      assumed to be FD (raw file descriptor) addresses; if  a  '/'  is  found
      before the first ':' or ',', GOPEN (generic file open) is assumed.

      The  required  number  and  type  of  address  parameters depend on the
      address type. E.g., TCP4  requires  a  server  specification  (name  or
      address), and a port specification (number or service name).

      Zero  or  more  address  options  may  be given with each address. They
      influence the address in some ways.  Options consist of an option  key-
      word  or  an  option keyword and a value, separated by '='. Option key-
      words are case insensitive.  For filtering the options that are  useful
      with  an  address  type, each option is member of one option group. For
      each address type there is a set of option groups allowed. Only options
      belonging  to  one  of  these  address  groups may be used (except with
      option -g).

      Address specifications following the above schema are also called  sin-
      gle  address specifications.  Two single addresses can be combined with
      "!!" to form a dual type address  for  one  channel.  Here,  the  first
      address  is  used by socat for reading data, and the second address for
      writing data. There is no way to specify an option only once for  being
      applied to both single addresses.

      Usually,  addresses  are  opened in read/write mode. When an address is
      part of a dual address specification, or when option -u or -U is  used,
      an  address  might be used only for reading or for writing. Considering
      this is important with some address types.

      With socat version 1.5.0 and higher, the lexical analysis tries to han-
      dle  quotes and parenthesis meaningfully and allows escaping of special
      characters.  If one of the characters ( { [ ' is found, the correspond-
      ing  closing  character  -  )  }  ] ' - is looked for; they may also be
      nested. Within these constructs, socats special characters and  strings
      :  , !! are not handled specially. All those characters and strings can
      be escaped with \ or within ""

ADDRESS TYPES
      This section describes the available address types with their keywords,
      parameters, and semantics.

      CREATE:<filename>
             Opens  <filename>  with creat() and uses the file descriptor for
             writing.  This address type requires write-only context, because
             a file opened with creat cannot be read from.
             Flags  like  O_LARGEFILE cannot be applied. If you need them use
             OPEN with options create,create.
             <filename> must be a valid existing or not  existing  path.   If
             <filename>  is  a named pipe, creat() might block; if <filename>
             refers to a socket, this is an error.
             Option groups: FD,REG,NAMED
             Useful options: mode, user,  group,  unlink-early,  unlink-late,
             append
             See also: OPEN, GOPEN

      EXEC:<command-line>
             Forks a sub process that establishes communication with its par-
             ent process and invokes the specified program  with  execvp()  .
             <command-line>  is  a simple command with arguments separated by
             single spaces. If the program name  contains  a  '/',  the  part
             after the last '/' is taken as ARGV[0]. If the program name is a
             relative path, the execvp() semantics for  finding  the  program
             via  $PATH  apply.  After successful program start, socat writes
             data to stdin of the process and reads from its stdout  using  a
             UNIX domain socket generated by socketpair() per default. (exam-
             ple)
             Option groups: FD,SOCKET,EXEC,FORK,TERMIOS
             Useful options: path, fdin, fdout,  chroot,  su,  su-d,  nofork,
             pty, stderr, ctty, setsid, pipes, login, sigint, sigquit
             See also: SYSTEM

      FD:<fdnum>
             Uses the file descriptor <fdnum>. It must already exist as valid
             UN*X file descriptor.
             Option groups: FD (TERMIOS,REG,SOCKET)
             See also: STDIO, STDIN, STDOUT, STDERR

      GOPEN:<filename>
             (Generic open) This address type tries to handle any file system
             entry  except directories usefully. <filename> may be a relative
             or absolute path. If it already exists, its type is checked.  In
             case  of  a  UNIX  domain  socket, socat connects; if connecting
             fails, socat assumes a datagram socket and uses sendto()  calls.
             If  the  entry  is  not  a  socket,  socat opens it applying the
             O_APPEND flag.  If it does not exist, it  is  opened  with  flag
             O_CREAT as a regular file (example).
             Option groups: FD,REG,SOCKET,NAMED,OPEN
             See also: OPEN, CREATE, UNIX-CONNECT

      IP-SENDTO:<host>:<protocol>
             Opens a raw IP socket. Depending on host specification or option
             pf, IP protocol version 4 or 6 is used. It  uses  <protocol>  to
             send  packets  to  <host> [IP address] and receives packets from
             host, ignores packets from other hosts.  Protocol 255  uses  the
             raw socket with the IP header being part of the data.
             Option groups: FD,SOCKET,IP4,IP6
             Useful options: pf, ttl
